with Ada.Unchecked_Deallocation, Ada.Text_IO;
use Ada.Text_IO;

package body ListesOrdonnees is
   
   procedure Free is new Ada.Unchecked_Deallocation(Cellule, Lien);
   
   procedure Initialiser(L : in out Liste) is
   begin
      if(L.Debut /= null) then
	 Vider(L);
      end if;
      L.Cardinal := 0;
   end Initialiser;
   
   procedure Vider(L : in out Liste) is
      L_Actu, L_Prec : Lien;
   begin
      L_Actu := L.Debut;
      while (L_Actu /= null) loop
	 L_Prec := L_Actu;
	 L_Actu := L_Actu.all.Suiv;
	 Free(L_Prec);
	 L.Cardinal := L.Cardinal - 1;
      end loop;
   end Vider;
	 
   procedure Inserer(E : in Element; L : in out Liste) is
      L_Actu : Lien := L.Debut;
      L_Prec : Lien;
   begin
      L_Actu := L.Debut;
      if (L_Actu = null or else E < L_Actu.all.Info) then
	 L.Debut := new Cellule'(E, L_Actu);
	 L.Cardinal := L.Cardinal+1;
      else
	 loop
	    L_Prec := L_Actu;
	    L_Actu := L_Actu.all.Suiv;
	    exit when not(L_Actu /= null and then (L_Actu.all.Info < E));
	 end loop;
	 if (L_Actu /= null and then (L_Actu.all.Info = E)) then
	    raise Element_Deja_Present;
	 else
	    L_Prec.all.Suiv := new Cellule'(E, L_Actu);
	    L.Cardinal := L.Cardinal + 1;
	 end if;
      end if;
   end Inserer; 
   
   function Cardinal(L : in Liste) return Natural is
   begin
      return L.Cardinal;
   end Cardinal;
   
   function Est_Vide(L : in Liste) return Boolean is
   begin
      return L.Cardinal = 0;
   end Est_Vide;
   
   procedure Supprimer(E : in Element; L : in out Liste) is
      L_Actu : Lien := L.Debut;
      L_Prec, L_Suiv : Lien;
   begin
      L_Actu := L.Debut;
      if (L_Actu = null or else E < L_Actu.all.Info) then
	 raise Element_Non_Present;
      elsif (L_Actu.all.Info = E) then
	L_Suiv := L_Actu.all.Suiv;
	L.Debut := new Cellule'(E, L_Suiv); 
	Free(L_Actu);
	L.Cardinal := L.Cardinal-1;
      else
	 while (L_Actu /= null and then L_Actu.all.Info < E) loop
	    L_Prec := L_Actu;
	    L_Actu := L_Actu.all.Suiv;
	 end loop;
	 if (L_Actu /= null and then (L_Actu.all.Info = E)) then
	    L_Suiv := L_Actu.all.Suiv;
	    L_Prec.all.Suiv := new Cellule'(E, L_Suiv); 
	    Free(L_Actu);
	    L.Cardinal := L.Cardinal-1;
	 else
	    raise Element_Non_Present;
	 end if;
      end if;
   end Supprimer;
   
   procedure Afficher(L : in Liste) is
      L_Actu : Lien := L.Debut;
      Num_Elmt : Natural := 0;
   begin
      while(L_Actu /= null) loop
	 Put("Element n" & Integer'Image(Num_Elmt) & " : ");
	 Put(To_String(L_Actu.all.Info));
	 New_Line;
	 L_Actu := L_Actu.all.Suiv;
	 Num_Elmt := Num_Elmt+1;
      end loop;
   end Afficher;
   
end ListesOrdonnees;
